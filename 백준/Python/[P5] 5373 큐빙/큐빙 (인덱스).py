import sys
input = sys.stdin.readline

# 현재 면 8개 돌리기
def rotate(i, idxs):
    cube[i][idxs[0]], cube[i][idxs[2]], cube[i][idxs[4]], cube[i][idxs[6]] = cube[i][idxs[6]], cube[i][idxs[0]], cube[i][idxs[2]], cube[i][idxs[4]]
    cube[i][idxs[1]], cube[i][idxs[3]], cube[i][idxs[5]], cube[i][idxs[7]] = cube[i][idxs[7]], cube[i][idxs[1]], cube[i][idxs[3]], cube[i][idxs[5]]

##############################################################################################################################################################

# 바꿔야 하는 면, 인덱스가 주어졌을 때, 큐브 돌리기
def rotate_other(change):
    # 마지막으로 바꿔지는 칸의 색 저장해두기
    li, lidxs = change[3]
    memo = [cube[li][i] for i in lidxs]

    # 면, 인덱스
    for j in range(3, 0, -1):
        # 바꿀 면과 인덱스
        i1, idxs1 = change[j]

        # 새로 들어갈 면과 인덱스
        i2, idxs2 = change[j - 1]

        # 바꾸기
        for i in range(3):
            cube[i1][idxs1[i]] = cube[i2][idxs2[i]]

    # 첫번째 면도 바꾸기
    fi, fidxs = change[0]
    for i in range(3):
        cube[fi][fidxs[i]] = memo[i]

##############################################################################################################################################################

# 테스트 케이스 수
for _ in range(int(input())):
    # 큐브 (0: 윗면, 1: 아랫면, 2: 앞면, 3: 뒷면, 4: 왼쪽, 5: 오른쪽)
    cube = [['w'] * 9, ['y'] * 9, ['r'] * 9, ['o'] * 9, ['g'] * 9, ['b'] * 9]

    # 돌린 횟수
    n = int(input())

    # 돌린 면, 방향
    for info in input().split():
        # 면, 방향
        i, d = info[0], info[1]

        # 윗면
        if i == 'U':
            # 시계 방향
            if d == '+':
                rotate(0, [0, 1, 2, 5, 8, 7, 6, 3])
                rotate_other([[2, [0, 1, 2]], [4, [0, 1, 2]], [3, [0, 1, 2]], [5, [0, 1, 2]]])
            # 반시계 방향
            else:
                rotate(0, [0, 3, 6, 7, 8, 5, 2, 1])
                rotate_other([[2, [0, 1, 2]], [5, [0, 1, 2]], [3, [0, 1, 2]], [4, [0, 1, 2]]])

        # 아랫면
        elif i == 'D':
            # 시계 방향
            if d == '+':
                rotate(1, [0, 1, 2, 5, 8, 7, 6, 3])
                rotate_other([[2, [6, 7, 8]], [5, [6, 7, 8]], [3, [6, 7, 8]], [4, [6, 7, 8]]])
            # 반시계 방향
            else:
                rotate(1, [0, 3, 6, 7, 8, 5, 2, 1])
                rotate_other([[2, [6, 7, 8]], [4, [6, 7, 8]], [3, [6, 7, 8]], [5, [6, 7, 8]]])

        # 앞면
        elif i == 'F':
            # 시계 방향
            if d == '+':
                rotate(2, [0, 1, 2, 5, 8, 7, 6, 3])
                rotate_other([[0, [6, 7, 8]], [5, [0, 3, 6]], [1, [2, 1, 0]], [4, [8, 5, 2]]])
            # 반시계 방향
            else:
                rotate(2, [0, 3, 6, 7, 8, 5, 2, 1])
                rotate_other([[0, [6, 7, 8]], [4, [8, 5, 2]], [1, [2, 1, 0]], [5, [0, 3, 6]]])

        # 뒷면
        elif i == 'B':
            # 시계 방향
            if d == '+':
                rotate(3, [0, 1, 2, 5, 8, 7, 6, 3])
                rotate_other([[0, [2, 1, 0]], [4, [0, 3, 6]], [1, [6, 7, 8]], [5, [8, 5, 2]]])
            # 반시계 방향
            else:
                rotate(3, [0, 3, 6, 7, 8, 5, 2, 1])
                rotate_other([[0, [2, 1, 0]], [5, [8, 5, 2]], [1, [6, 7, 8]], [4, [0, 3, 6]]])

        # 왼쪽면
        elif i == 'L':
            # 시계 방향
            if d == '+':
                rotate(4, [0, 1, 2, 5, 8, 7, 6, 3])
                rotate_other([[0, [0, 3, 6]], [2, [0, 3, 6]], [1, [0, 3, 6]], [3, [8, 5, 2]]])
            # 반시계 방향
            else:
                rotate(4, [0, 3, 6, 7, 8, 5, 2, 1])
                rotate_other([[0, [0, 3, 6]], [3, [8, 5, 2]], [1, [0, 3, 6]], [2, [0, 3, 6]]])

        # 오른쪽면
        elif i == 'R':
            # 시계 방향
            if d == '+':
                rotate(5, [0, 1, 2, 5, 8, 7, 6, 3])
                rotate_other([[0, [8, 5, 2]], [3, [0, 3, 6]], [1, [8, 5, 2]], [2, [8, 5, 2]]])
            # 반시계 방향
            else:
                rotate(5, [0, 3, 6, 7, 8, 5, 2, 1])
                rotate_other([[0, [8, 5, 2]], [2, [8, 5, 2]], [1, [8, 5, 2]], [3, [0, 3, 6]]])

    # 윗면 출력
    print(''.join(cube[0][:3]))
    print(''.join(cube[0][3:6]))
    print(''.join(cube[0][6:]))
